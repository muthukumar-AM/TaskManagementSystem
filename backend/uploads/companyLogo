import React, { useState, useEffect } from 'react';import { Modal, Button, Form, Row, Col } from 'react-bootstrap';import { Formik, Field, ErrorMessage } from 'formik';import * as Yup from 'yup';import axios from 'axios';const validationSchema = Yup.object().shape({    empId: Yup.string().required('Employee ID is required'),    name: Yup.string().required('Name is required'),    email: Yup.string().email('Invalid email address').required('Email is required'),    phone: Yup.string().matches(/^\d+$/, 'Phone number is not valid').required('Phone number is required'),    team: Yup.string().required('Team is required'),    role: Yup.string().required('Role is required'),    password: Yup.string().when('$isUpdate', {        is: true,        then: Yup.string().min(8, 'Password must be at least 8 characters'),        otherwise: Yup.string().required('Password is required').min(8, 'Password must be at least 8 characters'),    }),});const EmpModal = ({ show, handleClose, selectedEmployee, setEmployees, companyId }) => {    const [isUpdate, setIsUpdate] = useState(false);    useEffect(() => {        setIsUpdate(!!selectedEmployee); // Check if selectedEmployee exists to determine if it's an update    }, [selectedEmployee]);    const handleSubmit = (values, { setSubmitting }) => {        const apiUrl = isUpdate            ? `http://localhost:3001/api/employees/${selectedEmployee._id}`            : 'http://localhost:3001/api/addEmployee';        axios({            method: isUpdate ? 'put' : 'post',            url: apiUrl,            data: values,        })        .then(response => {            console.log(response.data);            setSubmitting(false);            handleClose();            // Refresh the employees list after update or addition            axios.get('http://localhost:3001/api/employees')                .then(response => setEmployees(response.data))                .catch(error => console.error('Error fetching employees:', error));        })        .catch(error => {            console.error('Error:', error);            setSubmitting(false);        });    };    return (        <Modal show={show} onHide={handleClose} centered>            <Modal.Header closeButton>                <Modal.Title>{isUpdate ? 'Update Employee' : 'Add Employee'}</Modal.Title>            </Modal.Header>            <Modal.Body>                <Formik                    initialValues={{                        empId: selectedEmployee ? selectedEmployee.empId : '',                        name: selectedEmployee ? selectedEmployee.name : '',                        email: selectedEmployee ? selectedEmployee.email : '',                        phone: selectedEmployee ? selectedEmployee.phone : '',                        team: selectedEmployee ? selectedEmployee.team : '',                        role: selectedEmployee ? selectedEmployee.role : '',                        password: '',                        companyId: companyId,                    }}                    validationSchema={validationSchema}                    onSubmit={handleSubmit}                    enableReinitialize                >                    {({ handleSubmit, isSubmitting }) => (                        <Form onSubmit={handleSubmit}>                            <h5 className="mb-3">Personal Details</h5>                            <Row>                                <Col lg={6}>                                    <Form.Group>                                        <Form.Label htmlFor="empId">Employee ID</Form.Label>                                        <Field name="empId" type="text" className="form-control" />                                        <ErrorMessage name="empId" component="div" className="text-danger" />                                    </Form.Group>                                </Col>                                <Col lg={6}>                                    <Form.Group>                                        <Form.Label htmlFor="name">Name</Form.Label>                                        <Field name="name" type="text" className="form-control" />                                        <ErrorMessage name="name" component="div" className="text-danger" />                                    </Form.Group>                                </Col>                                <Col lg={12}>                                    <Form.Group>                                        <Form.Label htmlFor="phone">Phone Number</Form.Label>                                        <Field name="phone" type="text" className="form-control" />                                        <ErrorMessage name="phone" component="div" className="text-danger" />                                    </Form.Group>                                </Col>                            </Row>                            <h5 className="mt-4 mb-3">Credentials</h5>                            <Row>                                <Col lg={6}>                                    <Form.Group>                                        <Form.Label htmlFor="email">Email</Form.Label>                                        <Field name="email" type="email" className="form-control" />                                        <ErrorMessage name="email" component="div" className="text-danger" />                                    </Form.Group>                                </Col>                                {!isUpdate && (                                    <Col lg={6}>                                        <Form.Group>                                            <Form.Label htmlFor="password">Password</Form.Label>                                            <Field name="password" type="password" className="form-control" />                                            <ErrorMessage name="password" component="div" className="text-danger" />                                        </Form.Group>                                    </Col>                                )}                            </Row>                            <h5 className="mt-4 mb-3">Company</h5>                            <Row>                                <Col lg={6}>                                    <Form.Group>                                        <Form.Label htmlFor="team">Team</Form.Label>                                        <Field name="team" type="text" className="form-control" />                                        <ErrorMessage name="team" component="div" className="text-danger" />                                    </Form.Group>                                </Col>                                <Col lg={6}>                                    <Form.Group>                                        <Form.Label htmlFor="role">Role</Form.Label>                                        <Field name="role" type="text" className="form-control" />                                        <ErrorMessage name="role" component="div" className="text-danger" />                                    </Form.Group>                                </Col>                            </Row>                            <Button variant="primary" type="submit" disabled={isSubmitting} className="w-100 mt-4">                                {isUpdate ? 'Update' : 'Submit'}                            </Button>                        </Form>                    )}                </Formik>            </Modal.Body>        </Modal>    );};export default EmpModal;